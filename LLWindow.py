# Импорты. Основные виджеты расположены в PyQt5.QtWidgets
import sys
from PyQt5.QtWidgets import QApplication, QWidget


#Процедурный подход (для примера)
if __name__ == '__main__':

    app = QApplication(sys.argv) #Каждое приложение PyQt5 должно создать объект приложения (экземпляр QApplication). Параметр sys.argv это список аргументов командной строки.

    w = QWidget() #Виджет QWidget это базовый класс для всех объектов интерфейса пользователя в PyQt5. 
        #Мы предоставляем конструктор по умолчанию для QWidget. Конструктор по умолчанию не имеет родителя. Виджет без родителей называется окно.

    w.resize(500, 350) #Метод resize() изменяет размеры виджета.

    w.move(800, 150) #Метод move() двигает виджет на экране на координату x, y.

    w.setWindowTitle('Длинная линия') #Здесь мы задаём заголовок нашего окна.

    w.show() #Метод show() отображает виджет на экране. 
        #Виджет сначала создаётся в памяти, и только потом (с помощью метода show) показывается на экране.

    sys.exit(app.exec_()) #Наконец, мы попадаем в основной цикл приложения. Обработка событий начинается с этой точки. 
        #Основной цикл получает события от оконной системы и распределяет их по виджетам приложения. 
        #Основной цикл заканчивается, если мы вызываем метод exit() или главный виджет уничтожен. 
        #Метод sys.exit() гарантирует чистый выход. Вы будете проинформированы, как завершилось приложение.
        #Метод exec_ () имеет подчеркивание. Это происходит потому, что exec является ключевым словом в python 2.


